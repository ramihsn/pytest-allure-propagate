from typing import Any, ContextManager, Optional, Type
from types import TracebackType
import enum

class _AnyContextManager(ContextManager[Any]):
    def __enter__(self) -> Any: ...
    def __exit__(
        self, __t: Optional[Type[BaseException]], __v: Optional[BaseException], __tb: Optional[TracebackType]
    ) -> bool: ...

def title(title: str) -> None: ...
def description(description: str) -> None: ...
def description_html(description: str) -> None: ...
def label(name: str, value: str) -> None: ...
def severity(severity: str) -> None: ...
def tag(tag: str) -> None: ...
def id(id: str) -> None: ...
def suite(suite: str) -> None: ...
def parent_suite(parent_suite: str) -> None: ...
def sub_suite(sub_suite: str) -> None: ...
def epic(epic: str) -> None: ...
def feature(feature: str) -> None: ...
def story(story: str) -> None: ...
def link(url: str, name: str) -> None: ...
def issue(url: str, name: str) -> None: ...
def testcase(url: str, name: str) -> None: ...
def dynamic(title: str) -> None: ...
def step(title: str, propagate: bool = ..., raise_on_parent: bool = ...) -> _AnyContextManager: ...
def attach(body: str, name: str, attachment_type: str, extension: str = ...) -> None: ...
def manual(title: str) -> None: ...

severity_level: enum.Enum
attachment_type: enum.Enum
parameter_mode: enum.Enum

def aggregate_step(title: str) -> _AnyContextManager: ...
def testcase(url: str, name: str) -> None: ...
